package PacketIO

import AbilityObjEditing
import ObjectIds
import ErrorHandling
import StringUtils
import Execute

// only works in 1.30+
// because fuck you

@configurable public constant DATA_PACKETS_PER_FILE = 64

constant DATA_DUMMY_ID = 'AXDT'
constant DATA_DUMMY_LEVELS = DATA_PACKETS_PER_FILE
constant DATA_DUMMY_RAWCODE = compiletime(DATA_DUMMY_ID.toRawCode())
// max amount of data that can fit into a preload call safely
// value was determined experimentally
// anything above 259 symbols gets removed
constant DATA_PER_PRELOAD = 259

constant DATA_PADDING_1 = "\")\r\n\tcall BlzSetAbilityTooltip('" + DATA_DUMMY_RAWCODE + "',\""
constant DATA_PADDING_2 = "\",$"
constant DATA_PADDING_3 = ")\r\n//"
constant DATA_FOOTER = "\" )\r\nendfunction\r\nfunction AAA takes nothing returns nothing \r\n//"

public constant hexs = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]

public function toHex(int number, int length) returns string
    var t = number
    var result = ""
    for i = 1 to length
        result = hexs[t mod 16] + result
        t = t div 16
    return result

@test function hexTests()
    let a1 = toHex($1000, 4)
    let a2 = toHex($ABCD, 4)
    let a3 = toHex($AAAABBB, 7)
    let a4 = toHex($FDEABB, 6)

    assertTrue(a1 == "1000")
    assertTrue(a2 == "ABCD")
    assertTrue(a3 == "AAAABBB")
    assertTrue(a4 == "FDEABB")


// max amount of usable payload we can get per preload call...
public constant MAX_PACKET_LENGTH = compiletime(
    DATA_PER_PRELOAD - 
    // static padding
    DATA_PADDING_1.length() - 
    DATA_PADDING_2.length() - 
    DATA_PADDING_3.length() -
    // dummy id
    DATA_DUMMY_RAWCODE.length() -
    // $ + 4 hex digits
    5)

public class PacketWriter
    private static var currentPacket = 1

    static function initialize()
        currentPacket = 1
        PreloadGenClear()
        PreloadGenStart()

    static function write(string packet)
        if packet.length() > MAX_PACKET_LENGTH
            error("exceeded max packet length")

        if currentPacket > DATA_PACKETS_PER_FILE
            error("exceeded max packets per file")

        let packetHex = toHex(currentPacket, 4)

        Preload(DATA_PADDING_1 + packet + DATA_PADDING_2 + packetHex + DATA_PADDING_3)        

        currentPacket++

    static function commit(string path)
        Preload(DATA_FOOTER)
        PreloadGenEnd(path)
        
    static function createFolder(string path)
        var current = ""
        for folder in path.split("/")
            if folder.contains(".")
                break
            current += folder + "/"
            initialize()
            commit(current + "touch.txt")

public class PacketReader
    private static var currentPacket = 1

    static function open(string path)
        PreloadGenClear()
        PreloadGenStart()
        execute() ->
            for i = 1 to DATA_DUMMY_LEVELS
                BlzSetAbilityTooltip(DATA_DUMMY_ID, "END OF FILE", i)
        Preloader(path)

        currentPacket = 1

    static function read() returns string
        var data = BlzGetAbilityTooltip(DATA_DUMMY_ID, currentPacket)
        if data == "END OF FILE"
            return ""
        currentPacket++
        return data

@compiletime function generateDummy()
    let dummy = new AbilityDefinitionIllidanChannel(DATA_DUMMY_ID)
        ..setLevels(DATA_DUMMY_LEVELS)

    for i = 1 to DATA_DUMMY_LEVELS
        dummy.setTooltipNormal(i, "")