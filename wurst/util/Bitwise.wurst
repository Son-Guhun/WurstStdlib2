package Bitwise

int array lbyte
int array rbyte
int array andData
int array orData
int array xorData
int array powShift

function initLbyte()
    integer i16 = 0x0
    integer i256 = 0x0
    integer i
    while i256 < 0x100
        i = 0
        while i < 0x10
            lbyte[i256] = i16
            i256 = i256 + 1
            i = i + 1
        i16 = i16 + 1

function initRbyte()
    integer i256 = 0x0
    integer i16
    while i256 < 0x100
        i16 = 0
        while i16 < 0x10
            rbyte[i256] = i16
            i256 = i256 + 1
            i16 = i16 + 1

function initShift()
    integer bit = 0
    while bit <= 0x20
        powShift[bit] = R2I(Pow(2, I2R(bit)))
        bit = bit + 1

function initAnd()
    andData[0x00] = 0x0
    andData[0x01] = 0x0
    andData[0x02] = 0x0
    andData[0x03] = 0x0
    andData[0x04] = 0x0
    andData[0x05] = 0x0
    andData[0x06] = 0x0
    andData[0x07] = 0x0
    andData[0x08] = 0x0
    andData[0x09] = 0x0
    andData[0x0a] = 0x0
    andData[0x0b] = 0x0
    andData[0x0c] = 0x0
    andData[0x0d] = 0x0
    andData[0x0e] = 0x0
    andData[0x0f] = 0x0
    andData[0x10] = 0x0
    andData[0x11] = 0x1
    andData[0x12] = 0x0
    andData[0x13] = 0x1
    andData[0x14] = 0x0
    andData[0x15] = 0x1
    andData[0x16] = 0x0
    andData[0x17] = 0x1
    andData[0x18] = 0x0
    andData[0x19] = 0x1
    andData[0x1a] = 0x0
    andData[0x1b] = 0x1
    andData[0x1c] = 0x0
    andData[0x1d] = 0x1
    andData[0x1e] = 0x0
    andData[0x1f] = 0x1
    andData[0x20] = 0x0
    andData[0x21] = 0x0
    andData[0x22] = 0x2
    andData[0x23] = 0x2
    andData[0x24] = 0x0
    andData[0x25] = 0x0
    andData[0x26] = 0x2
    andData[0x27] = 0x2
    andData[0x28] = 0x0
    andData[0x29] = 0x0
    andData[0x2a] = 0x2
    andData[0x2b] = 0x2
    andData[0x2c] = 0x0
    andData[0x2d] = 0x0
    andData[0x2e] = 0x2
    andData[0x2f] = 0x2
    andData[0x30] = 0x0
    andData[0x31] = 0x1
    andData[0x32] = 0x2
    andData[0x33] = 0x3
    andData[0x34] = 0x0
    andData[0x35] = 0x1
    andData[0x36] = 0x2
    andData[0x37] = 0x3
    andData[0x38] = 0x0
    andData[0x39] = 0x1
    andData[0x3a] = 0x2
    andData[0x3b] = 0x3
    andData[0x3c] = 0x0
    andData[0x3d] = 0x1
    andData[0x3e] = 0x2
    andData[0x3f] = 0x3
    andData[0x40] = 0x0
    andData[0x41] = 0x0
    andData[0x42] = 0x0
    andData[0x43] = 0x0
    andData[0x44] = 0x4
    andData[0x45] = 0x4
    andData[0x46] = 0x4
    andData[0x47] = 0x4
    andData[0x48] = 0x0
    andData[0x49] = 0x0
    andData[0x4a] = 0x0
    andData[0x4b] = 0x0
    andData[0x4c] = 0x4
    andData[0x4d] = 0x4
    andData[0x4e] = 0x4
    andData[0x4f] = 0x4
    andData[0x50] = 0x0
    andData[0x51] = 0x1
    andData[0x52] = 0x0
    andData[0x53] = 0x1
    andData[0x54] = 0x4
    andData[0x55] = 0x5
    andData[0x56] = 0x4
    andData[0x57] = 0x5
    andData[0x58] = 0x0
    andData[0x59] = 0x1
    andData[0x5a] = 0x0
    andData[0x5b] = 0x1
    andData[0x5c] = 0x4
    andData[0x5d] = 0x5
    andData[0x5e] = 0x4
    andData[0x5f] = 0x5
    andData[0x60] = 0x0
    andData[0x61] = 0x0
    andData[0x62] = 0x2
    andData[0x63] = 0x2
    andData[0x64] = 0x4
    andData[0x65] = 0x4
    andData[0x66] = 0x6
    andData[0x67] = 0x6
    andData[0x68] = 0x0
    andData[0x69] = 0x0
    andData[0x6a] = 0x2
    andData[0x6b] = 0x2
    andData[0x6c] = 0x4
    andData[0x6d] = 0x4
    andData[0x6e] = 0x6
    andData[0x6f] = 0x6
    andData[0x70] = 0x0
    andData[0x71] = 0x1
    andData[0x72] = 0x2
    andData[0x73] = 0x3
    andData[0x74] = 0x4
    andData[0x75] = 0x5
    andData[0x76] = 0x6
    andData[0x77] = 0x7
    andData[0x78] = 0x0
    andData[0x79] = 0x1
    andData[0x7a] = 0x2
    andData[0x7b] = 0x3
    andData[0x7c] = 0x4
    andData[0x7d] = 0x5
    andData[0x7e] = 0x6
    andData[0x7f] = 0x7
    andData[0x80] = 0x0
    andData[0x81] = 0x0
    andData[0x82] = 0x0
    andData[0x83] = 0x0
    andData[0x84] = 0x0
    andData[0x85] = 0x0
    andData[0x86] = 0x0
    andData[0x87] = 0x0
    andData[0x88] = 0x8
    andData[0x89] = 0x8
    andData[0x8a] = 0x8
    andData[0x8b] = 0x8
    andData[0x8c] = 0x8
    andData[0x8d] = 0x8
    andData[0x8e] = 0x8
    andData[0x8f] = 0x8
    andData[0x90] = 0x0
    andData[0x91] = 0x1
    andData[0x92] = 0x0
    andData[0x93] = 0x1
    andData[0x94] = 0x0
    andData[0x95] = 0x1
    andData[0x96] = 0x0
    andData[0x97] = 0x1
    andData[0x98] = 0x8
    andData[0x99] = 0x9
    andData[0x9a] = 0x8
    andData[0x9b] = 0x9
    andData[0x9c] = 0x8
    andData[0x9d] = 0x9
    andData[0x9e] = 0x8
    andData[0x9f] = 0x9
    andData[0xa0] = 0x0
    andData[0xa1] = 0x0
    andData[0xa2] = 0x2
    andData[0xa3] = 0x2
    andData[0xa4] = 0x0
    andData[0xa5] = 0x0
    andData[0xa6] = 0x2
    andData[0xa7] = 0x2
    andData[0xa8] = 0x8
    andData[0xa9] = 0x8
    andData[0xaa] = 0xa
    andData[0xab] = 0xa
    andData[0xac] = 0x8
    andData[0xad] = 0x8
    andData[0xae] = 0xa
    andData[0xaf] = 0xa
    andData[0xb0] = 0x0
    andData[0xb1] = 0x1
    andData[0xb2] = 0x2
    andData[0xb3] = 0x3
    andData[0xb4] = 0x0
    andData[0xb5] = 0x1
    andData[0xb6] = 0x2
    andData[0xb7] = 0x3
    andData[0xb8] = 0x8
    andData[0xb9] = 0x9
    andData[0xba] = 0xa
    andData[0xbb] = 0xb
    andData[0xbc] = 0x8
    andData[0xbd] = 0x9
    andData[0xbe] = 0xa
    andData[0xbf] = 0xb
    andData[0xc0] = 0x0
    andData[0xc1] = 0x0
    andData[0xc2] = 0x0
    andData[0xc3] = 0x0
    andData[0xc4] = 0x4
    andData[0xc5] = 0x4
    andData[0xc6] = 0x4
    andData[0xc7] = 0x4
    andData[0xc8] = 0x8
    andData[0xc9] = 0x8
    andData[0xca] = 0x8
    andData[0xcb] = 0x8
    andData[0xcc] = 0xc
    andData[0xcd] = 0xc
    andData[0xce] = 0xc
    andData[0xcf] = 0xc
    andData[0xd0] = 0x0
    andData[0xd1] = 0x1
    andData[0xd2] = 0x0
    andData[0xd3] = 0x1
    andData[0xd4] = 0x4
    andData[0xd5] = 0x5
    andData[0xd6] = 0x4
    andData[0xd7] = 0x5
    andData[0xd8] = 0x8
    andData[0xd9] = 0x9
    andData[0xda] = 0x8
    andData[0xdb] = 0x9
    andData[0xdc] = 0xc
    andData[0xdd] = 0xd
    andData[0xde] = 0xc
    andData[0xdf] = 0xd
    andData[0xe0] = 0x0
    andData[0xe1] = 0x0
    andData[0xe2] = 0x2
    andData[0xe3] = 0x2
    andData[0xe4] = 0x4
    andData[0xe5] = 0x4
    andData[0xe6] = 0x6
    andData[0xe7] = 0x6
    andData[0xe8] = 0x8
    andData[0xe9] = 0x8
    andData[0xea] = 0xa
    andData[0xeb] = 0xa
    andData[0xec] = 0xc
    andData[0xed] = 0xc
    andData[0xee] = 0xe
    andData[0xef] = 0xe
    andData[0xf0] = 0x0
    andData[0xf1] = 0x1
    andData[0xf2] = 0x2
    andData[0xf3] = 0x3
    andData[0xf4] = 0x4
    andData[0xf5] = 0x5
    andData[0xf6] = 0x6
    andData[0xf7] = 0x7
    andData[0xf8] = 0x8
    andData[0xf9] = 0x9
    andData[0xfa] = 0xa
    andData[0xfb] = 0xb
    andData[0xfc] = 0xc
    andData[0xfd] = 0xd
    andData[0xfe] = 0xe
    andData[0xff] = 0xf

function initOr()
    orData[0x00] = 0x0
    orData[0x01] = 0x1
    orData[0x02] = 0x2
    orData[0x03] = 0x3
    orData[0x04] = 0x4
    orData[0x05] = 0x5
    orData[0x06] = 0x6
    orData[0x07] = 0x7
    orData[0x08] = 0x8
    orData[0x09] = 0x9
    orData[0x0a] = 0xa
    orData[0x0b] = 0xb
    orData[0x0c] = 0xc
    orData[0x0d] = 0xd
    orData[0x0e] = 0xe
    orData[0x0f] = 0xf
    orData[0x10] = 0x1
    orData[0x11] = 0x1
    orData[0x12] = 0x3
    orData[0x13] = 0x3
    orData[0x14] = 0x5
    orData[0x15] = 0x5
    orData[0x16] = 0x7
    orData[0x17] = 0x7
    orData[0x18] = 0x9
    orData[0x19] = 0x9
    orData[0x1a] = 0xb
    orData[0x1b] = 0xb
    orData[0x1c] = 0xd
    orData[0x1d] = 0xd
    orData[0x1e] = 0xf
    orData[0x1f] = 0xf
    orData[0x20] = 0x2
    orData[0x21] = 0x3
    orData[0x22] = 0x2
    orData[0x23] = 0x3
    orData[0x24] = 0x6
    orData[0x25] = 0x7
    orData[0x26] = 0x6
    orData[0x27] = 0x7
    orData[0x28] = 0xa
    orData[0x29] = 0xb
    orData[0x2a] = 0xa
    orData[0x2b] = 0xb
    orData[0x2c] = 0xe
    orData[0x2d] = 0xf
    orData[0x2e] = 0xe
    orData[0x2f] = 0xf
    orData[0x30] = 0x3
    orData[0x31] = 0x3
    orData[0x32] = 0x3
    orData[0x33] = 0x3
    orData[0x34] = 0x7
    orData[0x35] = 0x7
    orData[0x36] = 0x7
    orData[0x37] = 0x7
    orData[0x38] = 0xb
    orData[0x39] = 0xb
    orData[0x3a] = 0xb
    orData[0x3b] = 0xb
    orData[0x3c] = 0xf
    orData[0x3d] = 0xf
    orData[0x3e] = 0xf
    orData[0x3f] = 0xf
    orData[0x40] = 0x4
    orData[0x41] = 0x5
    orData[0x42] = 0x6
    orData[0x43] = 0x7
    orData[0x44] = 0x4
    orData[0x45] = 0x5
    orData[0x46] = 0x6
    orData[0x47] = 0x7
    orData[0x48] = 0xc
    orData[0x49] = 0xd
    orData[0x4a] = 0xe
    orData[0x4b] = 0xf
    orData[0x4c] = 0xc
    orData[0x4d] = 0xd
    orData[0x4e] = 0xe
    orData[0x4f] = 0xf
    orData[0x50] = 0x5
    orData[0x51] = 0x5
    orData[0x52] = 0x7
    orData[0x53] = 0x7
    orData[0x54] = 0x5
    orData[0x55] = 0x5
    orData[0x56] = 0x7
    orData[0x57] = 0x7
    orData[0x58] = 0xd
    orData[0x59] = 0xd
    orData[0x5a] = 0xf
    orData[0x5b] = 0xf
    orData[0x5c] = 0xd
    orData[0x5d] = 0xd
    orData[0x5e] = 0xf
    orData[0x5f] = 0xf
    orData[0x60] = 0x6
    orData[0x61] = 0x7
    orData[0x62] = 0x6
    orData[0x63] = 0x7
    orData[0x64] = 0x6
    orData[0x65] = 0x7
    orData[0x66] = 0x6
    orData[0x67] = 0x7
    orData[0x68] = 0xe
    orData[0x69] = 0xf
    orData[0x6a] = 0xe
    orData[0x6b] = 0xf
    orData[0x6c] = 0xe
    orData[0x6d] = 0xf
    orData[0x6e] = 0xe
    orData[0x6f] = 0xf
    orData[0x70] = 0x7
    orData[0x71] = 0x7
    orData[0x72] = 0x7
    orData[0x73] = 0x7
    orData[0x74] = 0x7
    orData[0x75] = 0x7
    orData[0x76] = 0x7
    orData[0x77] = 0x7
    orData[0x78] = 0xf
    orData[0x79] = 0xf
    orData[0x7a] = 0xf
    orData[0x7b] = 0xf
    orData[0x7c] = 0xf
    orData[0x7d] = 0xf
    orData[0x7e] = 0xf
    orData[0x7f] = 0xf
    orData[0x80] = 0x8
    orData[0x81] = 0x9
    orData[0x82] = 0xa
    orData[0x83] = 0xb
    orData[0x84] = 0xc
    orData[0x85] = 0xd
    orData[0x86] = 0xe
    orData[0x87] = 0xf
    orData[0x88] = 0x8
    orData[0x89] = 0x9
    orData[0x8a] = 0xa
    orData[0x8b] = 0xb
    orData[0x8c] = 0xc
    orData[0x8d] = 0xd
    orData[0x8e] = 0xe
    orData[0x8f] = 0xf
    orData[0x90] = 0x9
    orData[0x91] = 0x9
    orData[0x92] = 0xb
    orData[0x93] = 0xb
    orData[0x94] = 0xd
    orData[0x95] = 0xd
    orData[0x96] = 0xf
    orData[0x97] = 0xf
    orData[0x98] = 0x9
    orData[0x99] = 0x9
    orData[0x9a] = 0xb
    orData[0x9b] = 0xb
    orData[0x9c] = 0xd
    orData[0x9d] = 0xd
    orData[0x9e] = 0xf
    orData[0x9f] = 0xf
    orData[0xa0] = 0xa
    orData[0xa1] = 0xb
    orData[0xa2] = 0xa
    orData[0xa3] = 0xb
    orData[0xa4] = 0xe
    orData[0xa5] = 0xf
    orData[0xa6] = 0xe
    orData[0xa7] = 0xf
    orData[0xa8] = 0xa
    orData[0xa9] = 0xb
    orData[0xaa] = 0xa
    orData[0xab] = 0xb
    orData[0xac] = 0xe
    orData[0xad] = 0xf
    orData[0xae] = 0xe
    orData[0xaf] = 0xf
    orData[0xb0] = 0xb
    orData[0xb1] = 0xb
    orData[0xb2] = 0xb
    orData[0xb3] = 0xb
    orData[0xb4] = 0xf
    orData[0xb5] = 0xf
    orData[0xb6] = 0xf
    orData[0xb7] = 0xf
    orData[0xb8] = 0xb
    orData[0xb9] = 0xb
    orData[0xba] = 0xb
    orData[0xbb] = 0xb
    orData[0xbc] = 0xf
    orData[0xbd] = 0xf
    orData[0xbe] = 0xf
    orData[0xbf] = 0xf
    orData[0xc0] = 0xc
    orData[0xc1] = 0xd
    orData[0xc2] = 0xe
    orData[0xc3] = 0xf
    orData[0xc4] = 0xc
    orData[0xc5] = 0xd
    orData[0xc6] = 0xe
    orData[0xc7] = 0xf
    orData[0xc8] = 0xc
    orData[0xc9] = 0xd
    orData[0xca] = 0xe
    orData[0xcb] = 0xf
    orData[0xcc] = 0xc
    orData[0xcd] = 0xd
    orData[0xce] = 0xe
    orData[0xcf] = 0xf
    orData[0xd0] = 0xd
    orData[0xd1] = 0xd
    orData[0xd2] = 0xf
    orData[0xd3] = 0xf
    orData[0xd4] = 0xd
    orData[0xd5] = 0xd
    orData[0xd6] = 0xf
    orData[0xd7] = 0xf
    orData[0xd8] = 0xd
    orData[0xd9] = 0xd
    orData[0xda] = 0xf
    orData[0xdb] = 0xf
    orData[0xdc] = 0xd
    orData[0xdd] = 0xd
    orData[0xde] = 0xf
    orData[0xdf] = 0xf
    orData[0xe0] = 0xe
    orData[0xe1] = 0xf
    orData[0xe2] = 0xe
    orData[0xe3] = 0xf
    orData[0xe4] = 0xe
    orData[0xe5] = 0xf
    orData[0xe6] = 0xe
    orData[0xe7] = 0xf
    orData[0xe8] = 0xe
    orData[0xe9] = 0xf
    orData[0xea] = 0xe
    orData[0xeb] = 0xf
    orData[0xec] = 0xe
    orData[0xed] = 0xf
    orData[0xee] = 0xe
    orData[0xef] = 0xf
    orData[0xf0] = 0xf
    orData[0xf1] = 0xf
    orData[0xf2] = 0xf
    orData[0xf3] = 0xf
    orData[0xf4] = 0xf
    orData[0xf5] = 0xf
    orData[0xf6] = 0xf
    orData[0xf7] = 0xf
    orData[0xf8] = 0xf
    orData[0xf9] = 0xf
    orData[0xfa] = 0xf
    orData[0xfb] = 0xf
    orData[0xfc] = 0xf
    orData[0xfd] = 0xf
    orData[0xfe] = 0xf
    orData[0xff] = 0xf

function initXor()
    xorData[0x0] = 0x0
    xorData[0x1] = 0x1
    xorData[0x2] = 0x2
    xorData[0x3] = 0x3
    xorData[0x4] = 0x4
    xorData[0x5] = 0x5
    xorData[0x6] = 0x6
    xorData[0x7] = 0x7
    xorData[0x8] = 0x8
    xorData[0x9] = 0x9
    xorData[0xa] = 0xa
    xorData[0xb] = 0xb
    xorData[0xc] = 0xc
    xorData[0xd] = 0xd
    xorData[0xe] = 0xe
    xorData[0xf] = 0xf
    xorData[0x10] = 0x1
    xorData[0x11] = 0x0
    xorData[0x12] = 0x3
    xorData[0x13] = 0x2
    xorData[0x14] = 0x5
    xorData[0x15] = 0x4
    xorData[0x16] = 0x7
    xorData[0x17] = 0x6
    xorData[0x18] = 0x9
    xorData[0x19] = 0x8
    xorData[0x1a] = 0xb
    xorData[0x1b] = 0xa
    xorData[0x1c] = 0xd
    xorData[0x1d] = 0xc
    xorData[0x1e] = 0xf
    xorData[0x1f] = 0xe
    xorData[0x20] = 0x2
    xorData[0x21] = 0x3
    xorData[0x22] = 0x0
    xorData[0x23] = 0x1
    xorData[0x24] = 0x6
    xorData[0x25] = 0x7
    xorData[0x26] = 0x4
    xorData[0x27] = 0x5
    xorData[0x28] = 0xa
    xorData[0x29] = 0xb
    xorData[0x2a] = 0x8
    xorData[0x2b] = 0x9
    xorData[0x2c] = 0xe
    xorData[0x2d] = 0xf
    xorData[0x2e] = 0xc
    xorData[0x2f] = 0xd
    xorData[0x30] = 0x3
    xorData[0x31] = 0x2
    xorData[0x32] = 0x1
    xorData[0x33] = 0x0
    xorData[0x34] = 0x7
    xorData[0x35] = 0x6
    xorData[0x36] = 0x5
    xorData[0x37] = 0x4
    xorData[0x38] = 0xb
    xorData[0x39] = 0xa
    xorData[0x3a] = 0x9
    xorData[0x3b] = 0x8
    xorData[0x3c] = 0xf
    xorData[0x3d] = 0xe
    xorData[0x3e] = 0xd
    xorData[0x3f] = 0xc
    xorData[0x40] = 0x4
    xorData[0x41] = 0x5
    xorData[0x42] = 0x6
    xorData[0x43] = 0x7
    xorData[0x44] = 0x0
    xorData[0x45] = 0x1
    xorData[0x46] = 0x2
    xorData[0x47] = 0x3
    xorData[0x48] = 0xc
    xorData[0x49] = 0xd
    xorData[0x4a] = 0xe
    xorData[0x4b] = 0xf
    xorData[0x4c] = 0x8
    xorData[0x4d] = 0x9
    xorData[0x4e] = 0xa
    xorData[0x4f] = 0xb
    xorData[0x50] = 0x5
    xorData[0x51] = 0x4
    xorData[0x52] = 0x7
    xorData[0x53] = 0x6
    xorData[0x54] = 0x1
    xorData[0x55] = 0x0
    xorData[0x56] = 0x3
    xorData[0x57] = 0x2
    xorData[0x58] = 0xd
    xorData[0x59] = 0xc
    xorData[0x5a] = 0xf
    xorData[0x5b] = 0xe
    xorData[0x5c] = 0x9
    xorData[0x5d] = 0x8
    xorData[0x5e] = 0xb
    xorData[0x5f] = 0xa
    xorData[0x60] = 0x6
    xorData[0x61] = 0x7
    xorData[0x62] = 0x4
    xorData[0x63] = 0x5
    xorData[0x64] = 0x2
    xorData[0x65] = 0x3
    xorData[0x66] = 0x0
    xorData[0x67] = 0x1
    xorData[0x68] = 0xe
    xorData[0x69] = 0xf
    xorData[0x6a] = 0xc
    xorData[0x6b] = 0xd
    xorData[0x6c] = 0xa
    xorData[0x6d] = 0xb
    xorData[0x6e] = 0x8
    xorData[0x6f] = 0x9
    xorData[0x70] = 0x7
    xorData[0x71] = 0x6
    xorData[0x72] = 0x5
    xorData[0x73] = 0x4
    xorData[0x74] = 0x3
    xorData[0x75] = 0x2
    xorData[0x76] = 0x1
    xorData[0x77] = 0x0
    xorData[0x78] = 0xf
    xorData[0x79] = 0xe
    xorData[0x7a] = 0xd
    xorData[0x7b] = 0xc
    xorData[0x7c] = 0xb
    xorData[0x7d] = 0xa
    xorData[0x7e] = 0x9
    xorData[0x7f] = 0x8
    xorData[0x80] = 0x8
    xorData[0x81] = 0x9
    xorData[0x82] = 0xa
    xorData[0x83] = 0xb
    xorData[0x84] = 0xc
    xorData[0x85] = 0xd
    xorData[0x86] = 0xe
    xorData[0x87] = 0xf
    xorData[0x88] = 0x0
    xorData[0x89] = 0x1
    xorData[0x8a] = 0x2
    xorData[0x8b] = 0x3
    xorData[0x8c] = 0x4
    xorData[0x8d] = 0x5
    xorData[0x8e] = 0x6
    xorData[0x8f] = 0x7
    xorData[0x90] = 0x9
    xorData[0x91] = 0x8
    xorData[0x92] = 0xb
    xorData[0x93] = 0xa
    xorData[0x94] = 0xd
    xorData[0x95] = 0xc
    xorData[0x96] = 0xf
    xorData[0x97] = 0xe
    xorData[0x98] = 0x1
    xorData[0x99] = 0x0
    xorData[0x9a] = 0x3
    xorData[0x9b] = 0x2
    xorData[0x9c] = 0x5
    xorData[0x9d] = 0x4
    xorData[0x9e] = 0x7
    xorData[0x9f] = 0x6
    xorData[0xa0] = 0xa
    xorData[0xa1] = 0xb
    xorData[0xa2] = 0x8
    xorData[0xa3] = 0x9
    xorData[0xa4] = 0xe
    xorData[0xa5] = 0xf
    xorData[0xa6] = 0xc
    xorData[0xa7] = 0xd
    xorData[0xa8] = 0x2
    xorData[0xa9] = 0x3
    xorData[0xaa] = 0x0
    xorData[0xab] = 0x1
    xorData[0xac] = 0x6
    xorData[0xad] = 0x7
    xorData[0xae] = 0x4
    xorData[0xaf] = 0x5
    xorData[0xb0] = 0xb
    xorData[0xb1] = 0xa
    xorData[0xb2] = 0x9
    xorData[0xb3] = 0x8
    xorData[0xb4] = 0xf
    xorData[0xb5] = 0xe
    xorData[0xb6] = 0xd
    xorData[0xb7] = 0xc
    xorData[0xb8] = 0x3
    xorData[0xb9] = 0x2
    xorData[0xba] = 0x1
    xorData[0xbb] = 0x0
    xorData[0xbc] = 0x7
    xorData[0xbd] = 0x6
    xorData[0xbe] = 0x5
    xorData[0xbf] = 0x4
    xorData[0xc0] = 0xc
    xorData[0xc1] = 0xd
    xorData[0xc2] = 0xe
    xorData[0xc3] = 0xf
    xorData[0xc4] = 0x8
    xorData[0xc5] = 0x9
    xorData[0xc6] = 0xa
    xorData[0xc7] = 0xb
    xorData[0xc8] = 0x4
    xorData[0xc9] = 0x5
    xorData[0xca] = 0x6
    xorData[0xcb] = 0x7
    xorData[0xcc] = 0x0
    xorData[0xcd] = 0x1
    xorData[0xce] = 0x2
    xorData[0xcf] = 0x3
    xorData[0xd0] = 0xd
    xorData[0xd1] = 0xc
    xorData[0xd2] = 0xf
    xorData[0xd3] = 0xe
    xorData[0xd4] = 0x9
    xorData[0xd5] = 0x8
    xorData[0xd6] = 0xb
    xorData[0xd7] = 0xa
    xorData[0xd8] = 0x5
    xorData[0xd9] = 0x4
    xorData[0xda] = 0x7
    xorData[0xdb] = 0x6
    xorData[0xdc] = 0x1
    xorData[0xdd] = 0x0
    xorData[0xde] = 0x3
    xorData[0xdf] = 0x2
    xorData[0xe0] = 0xe
    xorData[0xe1] = 0xf
    xorData[0xe2] = 0xc
    xorData[0xe3] = 0xd
    xorData[0xe4] = 0xa
    xorData[0xe5] = 0xb
    xorData[0xe6] = 0x8
    xorData[0xe7] = 0x9
    xorData[0xe8] = 0x6
    xorData[0xe9] = 0x7
    xorData[0xea] = 0x4
    xorData[0xeb] = 0x5
    xorData[0xec] = 0x2
    xorData[0xed] = 0x3
    xorData[0xee] = 0x0
    xorData[0xef] = 0x1
    xorData[0xf0] = 0xf
    xorData[0xf1] = 0xe
    xorData[0xf2] = 0xd
    xorData[0xf3] = 0xc
    xorData[0xf4] = 0xb
    xorData[0xf5] = 0xa
    xorData[0xf6] = 0x9
    xorData[0xf7] = 0x8
    xorData[0xf8] = 0x7
    xorData[0xf9] = 0x6
    xorData[0xfa] = 0x5
    xorData[0xfb] = 0x4
    xorData[0xfc] = 0x3
    xorData[0xfd] = 0x2
    xorData[0xfe] = 0x1
    xorData[0xff] = 0x0

@compiletime
function initBitwise()
    initLbyte()
    initRbyte()
    initShift()
    initAnd()
    initOr()
    initXor()

init
    initBitwise()

/**
    A tuple containing 4 bytes comprising a 4-byte integer.
    b1 is the least significant byte, b4 is the most significant byte.
    All functions operating on this are LSB first.
    The bytes are always unsigned, from 0 to 255.
    
    WARNING: This library contains no safety bound checks to guarantee
    that these bytes stay in the 0-255 range. If these values go out of bounds,
    the behaviour is undefined.
**/
public tuple byte4(int b1, int b2, int b3, int b4)

/**
    Selects the n-th byte from these bytes, starting from
    0 for the least significant byte and ending with
    3 for the most significant byte.
**/
public function byte4.select(int n) returns int
    int b
    if n > 1
        if n == 3
            b = this.b4
        else
            b = this.b3
    else
        if n == 1
            b = this.b2
        else
            b = this.b1
    return b

/**
    Replaces the byte in the n-th position with the provided one.
**/
public function byte4.put(int n, int b) returns byte4
    if n > 1
        if n == 3
            return byte4(this.b1, this.b2, this.b3, b)
        else
            return byte4(this.b1, this.b2, b, this.b4)
    else
        if n == 1
            return byte4(this.b1, b, this.b3, this.b4)
        else
            return byte4(b, this.b2, this.b3, this.b4)

/** Re-assembles these bytes into an integer. **/
public function byte4.toInt() returns int
    return this.b1 + this.b2 * 0x100 + this.b3 * 0x10000 + this.b4 * 0x1000000 

/**
    Turns this signed integer into an unsigned one if it is negative,
    removing the first (sign) bit
**/
public function int.toUnsigned() returns int
    int result
    if this < 0
        result = -2147483648 + this
    else
        result = this
    return result

public function int.byte1() returns int
    return this mod 0x100

public function int.byte2() returns int
    return (this - (this div 0x10000) * 0x10000) div 0x100

public function int.byte3() returns int
    return (this - (this div 0x1000000) * 0x1000000) div 0x10000

public function int.byte4(int isNegative) returns int
    return isNegative * 128 + this div 0x1000000

/** De-composes an integer into 4 unsigned bytes. **/
public function int.bytes() returns byte4
    int s = this
    int n
    if 0 > s
        s = -2147483648 + s
        n = 1
    else
        n = 0

    let b1 = s mod 0x100
    let b2 = (s - (s div 0x10000) * 0x10000) div 0x100
    let b3 = (s - (s div 0x1000000) * 0x1000000) div 0x10000
    let b4 = n * 128 + s div 0x1000000

    return byte4(b1, b2, b3, b4)

@test
function byteTestsNegative()
    let bytes = 0xFABCDE10.bytes()

    assertTrue(bytes.b1 == 0x10)
    assertTrue(bytes.b2 == 0xDE)
    assertTrue(bytes.b3 == 0xBC)
    assertTrue(bytes.b4 == 0xFA)

@test
function byteTestsPositive()
    let bytes = 0x0FBCDE10.bytes()

    assertTrue(bytes.b1 == 0x10)
    assertTrue(bytes.b2 == 0xDE)
    assertTrue(bytes.b3 == 0xBC)
    assertTrue(bytes.b4 == 0x0F)

/**
    Produces a signed integer from the bitstring.
    May contain whitespace for padding.
**/
public function fromBitString(string bitstring) returns int
    let l = bitstring.length() - 1

    var pow = 1
    var num = 0
    for i = l downto 0
        let char = bitstring.charAt(i)
        if char != " "
            if char == "1"
                num += pow
            pow *= 2

    return num

/**
    Produces a bistring from this integer.
**/ 
public function toBitString(int n) returns string
    var s = ""
    var b = n

    while b != 0
        s = (b mod 2).toString() + s 
        b = bwShiftr32(b, 1)

    return s

@test
function bitStringTests()
    assertTrue(compiletime(fromBitString("1")) == 1)
    assertTrue(compiletime(fromBitString("01")) == 1)
    assertTrue(compiletime(fromBitString("0001")) == 1)
    assertTrue(compiletime(fromBitString("1000")) == 8)
    assertTrue(compiletime(fromBitString("1001")) == 9)
    assertTrue(compiletime(fromBitString("10000000 00000000 00000000 00000000")) == -2147483648)
    assertTrue(compiletime(fromBitString("11111111 11111111 11111111 11111111")) == -1)

/** 4-bit AND operator **/
function bwAnd4(int s1, int s2) returns int
    return andData[s1 * 0x10 + s2]

/** 4-bit OR operator **/
function bwOr4(int s1, int s2) returns int
    return orData[s1 * 0x10 + s2]

/** 4-bit XOR operator **/
function bwXor4(int s1, int s2) returns int
    return xorData[s1 * 0x10 + s2]

/** 8-bit NOT operator **/
function bNot8(int s) returns int
    return 0xff - s

/** 8-bit AND operator **/
function bwAnd8(int s1, int s2) returns int
    return bwAnd4(lbyte[s1], lbyte[s2]) * 0x10 + bwAnd4(rbyte[s1], rbyte[s2])

/** 8-bit OR operator **/
function bwOr8(int s1, int s2) returns int
    return bwOr4(lbyte[s1], lbyte[s2]) * 0x10 + bwOr4(rbyte[s1], rbyte[s2])

/** 8-bit XOR operator **/
function bwXor8(int s1, int s2) returns int
    return bwXor4(lbyte[s1], lbyte[s2]) * 0x10 + bwXor4(rbyte[s1], rbyte[s2])

/** 32-bit SHIFTL operator **/
function bwShiftl32(int s, int shift) returns int
    return s * powShift[shift]

/** 32-bit SHIFTR operator **/
function bwShiftr32(int s, int shift) returns int
    var b = s
    int n
    if b < 0
        b = -2147483648 + b
        n = 1
    else
        n = 0
    return n*powShift[31-shift] + b div powShift[shift]

@test
function shiftTests()
    assertTrue(bwShiftl32(0xFF, 4) == 0xFF0)
    assertTrue(bwShiftl32(0xFF, 8) == 0xFF00)
    assertTrue(bwShiftl32(0xFF, 12) == 0xFF000)
    assertTrue(bwShiftl32(0xFF, 16) == 0xFF0000)
    assertTrue(bwShiftl32(0xFF, 24) == 0xFF000000)
    assertTrue(bwShiftr32(0xFF00FF, 4) == 0xFF00F)
    assertTrue(bwShiftr32(0xFF00FF, 8) == 0xFF00)
    assertTrue(bwShiftr32(0xFF00FF, 12) == 0xFF0)
    assertTrue(bwShiftr32(0xFF00FF, 16) == 0xFF)
    assertTrue(bwShiftr32(0xFF0000FF, 16) == 0xFF00)
    assertTrue(bwShiftr32(0xFF0000FF, 24) == 0xFF)

// function bwRotl32(int s, int shift) returns int
//     return bwOr32(bwShiftl32(s, shift), bwShiftr32(s, 4*8 - shift))

// function bwRotr32(int s, int shift) returns int
//     return bwOr32(bwShiftr32(s, shift), bwShiftl32(s, 4*8 - shift))

// @test function testRotations()
//     assertTrue(bwRotl32(fromBitString("0000 0000 0000 0000 0000 0000 0000 0000"), 1) == fromBitString("0000 0000 0000 0000 0000 0000 0000 0000"))
//     assertTrue(bwRotl32(fromBitString("1000 0000 0000 0000 0000 0000 0000 0000"), 1) == fromBitString("0000 0000 0000 0000 0000 0000 0000 0001"))
//     assertTrue(bwRotl32(fromBitString("1000 0000 0000 0000 0000 0000 0000 0000"), 1) == fromBitString("0000 0000 0000 0000 0000 0000 0000 0001"))
//     assertTrue(bwRotl32(fromBitString("1111 0000 0000 0000 0000 0000 0000 0000"), 1) == fromBitString("1110 0000 0000 0000 0000 0000 0000 0001"))
//     assertTrue(bwRotl32(fromBitString("1111 0000 0000 0000 0000 0000 0000 0000"), 6) == fromBitString("0000 0000 0000 0000 0000 0000 0011 1100"))
//     assertTrue(bwRotl32(fromBitString("1111 0000 0000 1111 0000 0000 0000 0000"), 7) == fromBitString("0000 0111 1000 0000 0000 0000 0111 1000"))

//     assertTrue(bwRotr32(fromBitString("0000 0000 0000 0000 0000 0000 0000 0000"), 1) == fromBitString("0000 0000 0000 0000 0000 0000 0000 0000"))
//     assertTrue(bwRotr32(fromBitString("1000 0000 0000 0000 0000 0000 0000 0000"), 1) == fromBitString("0100 0000 0000 0000 0000 0000 0000 0000"))
//     assertTrue(bwRotr32(fromBitString("0000 0000 0000 0000 0000 0000 0000 0001"), 1) == fromBitString("1000 0000 0000 0000 0000 0000 0000 0000"))
//     assertTrue(bwRotr32(fromBitString("0000 0000 0000 0000 0000 0000 0000 1111"), 1) == fromBitString("1000 0000 0000 0000 0000 0000 0000 0111"))
//     assertTrue(bwRotr32(fromBitString("1111 0000 0000 0000 0000 0000 0000 0000"), 6) == fromBitString("0000 0011 1100 0000 0000 0000 0000 0000"))
//     assertTrue(bwRotr32(fromBitString("0000 0000 0000 1111 0000 0000 0000 1111"), 7) == fromBitString("0001 1110 1000 0000 0000 0001 1110 0000"))

/** 32-bit NOT operator **/
function bwNot32(int s) returns int
    return -s - 1

/** 32-bit AND operator **/
function bwAnd32(int s1, int s2) returns int
    let bytes1 = s1.bytes()
    let bytes2 = s2.bytes()

    return byte4(
        bwAnd8(bytes1.b1, bytes2.b1),
        bwAnd8(bytes1.b2, bytes2.b2),
        bwAnd8(bytes1.b3, bytes2.b3),
        bwAnd8(bytes1.b4, bytes2.b4)
    ).toInt()

/** 32-bit OR operator **/
function bwOr32(int s1, int s2) returns int
    let bytes1 = s1.bytes()
    let bytes2 = s2.bytes()

    return byte4(
        bwOr8(bytes1.b1, bytes2.b1),
        bwOr8(bytes1.b2, bytes2.b2),
        bwOr8(bytes1.b3, bytes2.b3),
        bwOr8(bytes1.b4, bytes2.b4)
    ).toInt()

/** 32-bit XOR operator **/
function bwXor32(int s1, int s2) returns int
    let bytes1 = s1.bytes()
    let bytes2 = s2.bytes()

    return byte4(
        bwXor8(bytes1.b1, bytes2.b1),
        bwXor8(bytes1.b2, bytes2.b2),
        bwXor8(bytes1.b3, bytes2.b3),
        bwXor8(bytes1.b4, bytes2.b4)
    ).toInt()

@test
function tests32()
    assertTrue(bwAnd32(
        compiletime(fromBitString("1001 0001 0100 0010")),
        compiletime(fromBitString("1000 0100 0010 0110"))
    ) == compiletime(fromBitString("1000 0000 0000 0010")))

    assertTrue(bwAnd32(
        compiletime(fromBitString("1000 0000 0000 0000 1001 0001 0100 0010")),
        compiletime(fromBitString("1000 0000 0000 0000 1000 0100 0010 0110"))
    ) == compiletime(fromBitString("1000 0000 0000 0000 1000 0000 0000 0010")))

    assertTrue(bwOr32(
        compiletime(fromBitString("1001 0001 0100 0010")),
        compiletime(fromBitString("1000 0100 0010 0110"))
    ) == compiletime(fromBitString("1001 0101 0110 0110")))

    assertTrue(bwOr32(
        compiletime(fromBitString("1000 0000 0000 0000 1001 0001 0100 0010")),
        compiletime(fromBitString("1000 0000 0000 0000 1000 0100 0010 0110"))
    ) == compiletime(fromBitString("1000 0000 0000 0000 1001 0101 0110 0110")))

    assertTrue(bwXor32(
        compiletime(fromBitString("1001 0001 0100 0010")),
        compiletime(fromBitString("1000 0100 0010 0110"))
    ) == compiletime(fromBitString("0001 0101 0110 0100")))

    assertTrue(bwXor32(
        compiletime(fromBitString("1000 0000 0000 0000 1001 0001 0100 0010")),
        compiletime(fromBitString("1000 0000 0000 0000 1000 0100 0010 0110"))
    ) == compiletime(fromBitString("0000 0000 0000 0000 0001 0101 0110 0100")))

    assertTrue(bwXor32(
        compiletime(fromBitString("1000 0000 0000 0000 1001 0001 0100 0010")),
        compiletime(fromBitString("0000 0000 0000 0000 1000 0100 0010 0110"))
    ) == compiletime(fromBitString("1000 0000 0000 0000 0001 0101 0110 0100")))

/** 8-bit NOT **/
public function int.not8() returns int
    return bNot8(this)

/** 32-bit NOT **/
public function int.not32() returns int
    return bwNot32(this)

/** 8-bit AND **/
public function int.and8(int other) returns int
    return bwAnd8(this, other)

/** 32-bit AND **/
public function int.and32(int other) returns int
    return bwAnd32(this, other)

/** 8-bit OR **/
public function int.or8(int other) returns int
    return bwOr8(this, other)

/** 32-bit OR **/
public function int.or32(int other) returns int
    return bwOr32(this, other)

/** 8-bit XOR **/
public function int.xor8(int other) returns int
    return bwXor8(this, other)

/** 32-bit XOR **/
public function int.xor32(int other) returns int
    return bwXor32(this, other)

/** 32-bit SHIFTL **/
public function int.shiftl(int amount) returns int
    return bwShiftl32(this, amount)

/** 32-bit SHIFTR **/
public function int.shiftr(int amount) returns int
    return bwShiftr32(this, amount)

// public function int.rotl(int amount) returns int
//     return bwRotl32(this, amount)

// public function int.rotr(int amount) returns int
//     return bwRotr32(this, amount)